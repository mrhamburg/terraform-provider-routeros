package routeros

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

/*
  {
    ".id": "*54",
    "name": "",
    "domain-id": "",
    "domain-tag": "",
    "in-filter": "",
    "mpls-te-address": "",
    "mpls-te-area": "",
    "originate-default": "",
    "out-filter-chain": "",
    "out-filter-select": "",
    "redistribute": "",
    "router-id": "",
    "version": "",
    "vrf": "",
    "use-dn": ""
  }
*/

// ResourceRoutingOspfInstance https://help.mikrotik.com/docs/display/ROS/OSPF
func ResourceRoutingOspfInstance() *schema.Resource {
	resSchema := map[string]*schema.Schema{
		MetaResourcePath: PropResourcePath("/routing/ospf/instance"),
		MetaId:           PropId(Name),

		KeyName:     PropNameForceNewRw,
		KeyComment:  PropCommentRw,
		KeyDisabled: PropDisabledRw,
		"domain-id": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "MPLS-related parameter.",
		},
		"domain-tag": {
			Type:     schema.TypeInt,
			Optional: true,
			Description: "if set, then used in route redistribution (as route-tag in all external LSAs " +
				"generated by this router), and in route calculation (all external LSAs having this route " +
				"tag are ignored). Needed for interoperability with older Cisco systems. By default not set.",
		},
		"in-filter": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "name of the routing filter chain used for incoming prefixes",
		},
		"mpls-te-address": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "the area used for MPLS traffic engineering.",
		},
		"mpls-te-area": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "the area used for MPLS traffic engineering.",
		},
		"originate-default": {
			Type:        schema.TypeString,
			Default:     "never",
			Description: "Specifies default route (0.0.0.0/0) distribution method.",
		},
		"out-filter-chain": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "name of the routing filter chain used for outgoing prefixes filtering.",
		},
		"out-filter-select": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "name of the routing filter select chain, used for output selection.",
		},
		"redistribute": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Enable redistribution of specific route types.",
		},
		"router-id": {
			Type:    schema.TypeString,
			Default: "main",
			Description: "OSPF Router ID. Can be set explicitly as an IP address, or as the name " +
				"of the router-id instance.",
		},
		"version": {
			Type:         schema.TypeInt,
			Default:      2,
			Description:  "OSPF version this instance will be running (v2 for IPv4, v3 for IPv6).",
			ValidateFunc: validation.IntBetween(2, 3),
		},
		"vrf": {
			Type:        schema.TypeString,
			Default:     "main",
			Description: "the VRF table this OSPF instance operates on",
		},
		"use-dn": {
			Type:         schema.TypeString,
			Optional:     true,
			Description:  "",
			ValidateFunc: validation.StringInSlice([]string{"yes", "no"}, true),
		},
	}

	return &schema.Resource{
		CreateContext: DefaultCreate(resSchema),
		ReadContext:   DefaultRead(resSchema),
		UpdateContext: DefaultUpdate(resSchema),
		DeleteContext: DefaultDelete(resSchema),
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: resSchema,
	}
}
